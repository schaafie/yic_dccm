{"version":3,"file":"absolute-position-behavior.umd.js","sources":["lib/absolute-position-state-manager.js","absolute-position-behavior.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-resizable-behavior/iron-resizable-behavior.js\";\n\n// register globally so we can make sure there is only one\nwindow.AbsolutePositionStateManager = window.AbsolutePositionStateManager || {};\n// request if this exists. This helps invoke the el existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same modal\nwindow.AbsolutePositionStateManager.requestAvailability = () => {\n  if (!window.AbsolutePositionStateManager.instance) {\n    window.AbsolutePositionStateManager.instance = document.createElement(\n      \"absolute-position-state-manager\"\n    );\n    document.body.appendChild(window.AbsolutePositionStateManager.instance);\n  }\n  return window.AbsolutePositionStateManager.instance;\n};\n/**\n * `absolute-position-state-manager`\n * `A utility that manages the state of multiple a11y-media-players on a single page.`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass AbsolutePositionStateManager extends PolymerElement {\n  /* REQUIRED FOR TOOLING DO NOT TOUCH */\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"absolute-position-state-manager\";\n  }\n\n  // properties available to the custom el for data binding\n  static get properties() {\n    return {\n      /**\n       * Stores an array of all the players on the page.\n       */\n      els: {\n        type: Array,\n        value: []\n      }\n    };\n  }\n\n  /**\n   * Makes sure there is a utility ready and listening for els.\n   */\n  constructor() {\n    super();\n    let root = this;\n\n    // sets the instance to the current instance\n    if (!window.AbsolutePositionStateManager.instance) {\n      window.AbsolutePositionStateManager.instance = this;\n      return this;\n    }\n  }\n\n  /**\n   * life cycle, el is afixed to the DOM\n   * Makes sure there is a utility ready and listening for els.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  /**\n   * Loads el into array\n   */\n  loadElement(el) {\n    let root = this;\n    root.__on = root.__on !== undefined ? root.__on : false;\n    root.els.push(el);\n    root.positionElement(el);\n    if (!root.__on) root.addEventListeners();\n    root.__on = true;\n  }\n\n  /**\n   * Unloads el from array\n   */\n  unloadElement(el) {\n    let root = this;\n    root.els.filter(el => el === el);\n    root.__on = root.els > 0;\n    if (!root.__on) root.removeEventListeners();\n  }\n\n  /**\n   * Adds event listeners\n   */\n  addEventListeners() {\n    let root = this;\n    root.__timeout = false;\n    root.updateElements();\n    document.addEventListener(\"load\", root.updateElements());\n    window.addEventListener(\"resize\", function() {\n      clearTimeout(root.__timeout);\n      root.__timeout = setTimeout(root.updateElements(), 250);\n    });\n    root.__observer = new MutationObserver(function(mutations) {\n      root.checkMutations(mutations);\n    });\n    root.__observer.observe(document, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  /**\n   * Checks if there are any chances other than to\n   * the element's position and updates accordioning.\n   * This is needed so that positioning the elements\n   * doesn't trigger an infinite loop of updates.\n   *\n   * @param {array} mutation records\n   * @return {void}\n   */\n  checkMutations(mutations) {\n    let update = false;\n\n    mutations.forEach(mutation => {\n      if (update) return;\n      update =\n        update ||\n        !(\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"style\" &&\n          this.els.includes(mutation.target)\n        );\n    });\n    if (update) this.updateElements();\n  }\n\n  /**\n   * Returns the target el that this el is anchored to. It is\n   * either the el given by the `for` attribute, or the immediate parent\n   * of the el.\n   *\n   * @param {object} element using absolute-position behavior\n   * @return {object} target element for positioning\n   */\n  findTarget(el) {\n    let selector = \"#\" + el.for,\n      docQuery =\n        document.querySelectorAll(selector).length === 1\n          ? document.querySelector(selector)\n          : null,\n      target = el.target || docQuery,\n      ancestor = el;\n\n    /**\n     * Use `target` object if specified.\n     * If not, query the document for elements with the id specified in the `for` attribute.\n     * If there is more than one element that matches, find the closest matching element.\n     */\n    while (\n      el.for !== undefined &&\n      target === null &&\n      ancestor !== null &&\n      ancestor !== document\n    ) {\n      ancestor = ancestor.parentNode;\n      if (ancestor.nodeType === 11) ancestor = ancestor.host;\n      target = ancestor ? ancestor.querySelector(selector) : null;\n    }\n    return target;\n  }\n\n  /**\n   * Removes event listeners\n   * @return {void}\n   */\n  removeEventListeners() {\n    let root = this;\n    document.removeEventListener(\"load\", root.updateElements());\n    window.removeEventListener(\"resize\", function() {\n      clearTimeout(root.__timeout);\n      root.__timeout = setTimeout(root.updateElements(), 250);\n    });\n    if (root.__observer) {\n      root.__observer.disconnect();\n    }\n  }\n\n  /**\n   * Updates position for all elements on the page.\n   * @return {void}\n   */\n  updateElements() {\n    let root = this;\n    root.els.forEach(el => {\n      root.positionElement(el);\n    });\n  }\n\n  /**\n   * Gets an updated position based on target.\n   * @param {object} the element using absolute-position behavior\n   * @return {void}\n   */\n  positionElement(el) {\n    let target = this.findTarget(el);\n    if (!target || !el.offsetParent) return;\n    let offset = el.offset,\n      parentRect = el.offsetParent.getBoundingClientRect(),\n      targetRect = target.getBoundingClientRect(),\n      elRect = el.getBoundingClientRect(),\n      /**\n       * place the element before the vertically?\n       * @param {string} position as in \"top\", \"left\", \"right\", or \"bottom\"\n       */\n      vertical = position => {\n        return position !== \"left\" && position !== \"right\";\n      },\n      /**\n       * place the element before the target?\n       */\n      before = position => {\n        return position === \"left\" || position === \"top\";\n      },\n      /**\n       * fits the element within the parent's boundaries;\n       * if element is larget than the parent,\n       * it will be aligned where parent begins\n       */\n      fitToBounds = () => {\n        let pos1 = vertical(el.position) ? \"left\" : \"top\",\n          pos2 = vertical(el.position) ? \"right\" : \"bottom\",\n          getRect = rect => {\n            return vertical(el.position) ? rect.width : rect.height;\n          },\n          coord =\n            targetRect[pos1] - getRect(elRect) / 2 + getRect(targetRect) / 2, //works for left\n          min = parentRect[pos1],\n          max = parentRect[pos2] - getRect(elRect);\n        return el.fitToVisibleBounds\n          ? Math.max(min, Math.min(max, coord)) + \"px\" //Math.max(min, Math.min(max, coord)) + \"px\"\n          : coord + \"px\";\n      },\n      /**\n       * adds or subtracts the offset from the target based on a given postion\n       */\n      getCoord = () => {\n        return el.position === \"top\"\n          ? targetRect.top - elRect.height - offset + \"px\"\n          : el.position === \"left\"\n          ? targetRect.left - elRect.width - offset + \"px\"\n          : targetRect[el.position] + offset + \"px\";\n      },\n      /**\n       * determines if there is room for the element between\n       * the parent and target in a given position;\n       * if no room in any position it will return the original position\n       */\n      isFit = position => {\n        let size = vertical(position)\n          ? elRect.height + offset\n          : elRect.width + offset;\n        return before(position)\n          ? targetRect[position] - parentRect[position] > size\n          : parentRect[position] - targetRect[position] > size;\n      };\n    let flip = el.fitToVisibleBounds !== false && !isFit(el.position),\n      flipData = {\n        top: [\"bottom\", \"left\", \"right\"],\n        left: [\"right\", \"top\", \"bottom\"],\n        bottom: [\"top\", \"right\", \"left\"],\n        right: [\"left\", \"bottom\", \"top\"]\n      };\n    /*\n     * fits the element according to specified postion,\n     * or finds an alternative position that fits\n     */\n    if (flip && isFit(flipData[el.position][0])) {\n      el.position = flipData[el.position][0];\n    } else if (flip && isFit(flipData[el.position][1])) {\n      el.position = flipData[el.position][1];\n    } else if (flip && isFit(flipData[el.position][2])) {\n      el.position = flipData[el.position][2];\n    } else {\n      el.style.position = \"absolute\";\n      el.style.top = vertical(el.position) ? getCoord() : fitToBounds();\n      el.style.left = vertical(el.position) ? fitToBounds() : getCoord();\n      //provide positions for el and target (in case furthor positioning adjustments are needed)\n      el.__positions = {\n        self: elRect,\n        parent: parentRect,\n        target: targetRect\n      };\n    }\n  }\n\n  /**\n   * life cycle, el is removed from the DOM\n   */\n  disconnectedCallback() {\n    this.removeEventListeners();\n    super.disconnectedCallback();\n  }\n}\nwindow.customElements.define(\n  AbsolutePositionStateManager.tag,\n  AbsolutePositionStateManager\n);\nexport { AbsolutePositionStateManager };\n","/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./lib/absolute-position-state-manager\";\n\n/**\n * `absolute-position-behavior`\n * `Abstracting the positioning behavior from paper-tooltip to be resusable in other elements`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass AbsolutePositionBehavior extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: inline-block;\n  position: absolute;\n}\n\n:host([hidden]) {\n  display: none;\n}\n</style>\n<slot></slot>`;\n  }\n\n  // properties available to the custom element for data binding\n    static get properties() {\n    let props = {\n  /**\n   * Element is positioned from connected to disconnected?\n   * Otherwise setPosition and unsetPosition must be called manually.\n   */\n  \"auto\": {\n    \"type\": Boolean,\n    \"value\": false\n  },\n  /**\n   * If true, no parts of the tooltip will ever be shown offscreen.\n   */\n  \"fitToVisibleBounds\": {\n    \"type\": Boolean,\n    \"value\": false,\n    \"observer\": \"updatePosition\"\n  },\n  /**\n   * The id of the element that the tooltip is anchored to. This element\n   * must be a sibling of the tooltip. If this property is not set,\n   * then the tooltip will be centered to the parent node containing it.\n   */\n  \"for\": {\n    \"type\": String,\n    \"observer\": \"updatePosition\",\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The spacing between the top of the tooltip and the element it is\n   * anchored to.\n   */\n  \"offset\": {\n    \"type\": Number,\n    \"value\": 0,\n    \"observer\": \"updatePosition\"\n  },\n  /**\n   * Positions the tooltip to the top, right, bottom, left of its content.\n   */\n  \"position\": {\n    \"type\": String,\n    \"value\": \"bottom\",\n    \"observer\": \"updatePosition\",\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The actual target element\n   */\n  \"target\": {\n    \"type\": Object,\n    \"observer\": \"updatePosition\"\n  },\n  /**\n   * The element's style\n   */\n  \"__positions\": {\n    \"type\": Object\n  }\n}\n;\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"absolute-position-behavior\";\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    let root = this;\n    root.__observe = false;\n    root.__manager = window.AbsolutePositionStateManager.requestAvailability();\n    if (root.auto !== false) root.setPosition();\n  }\n\n  /**\n   * life cycle, element is ready\n   * @returns {void}\n   */\n  ready() {\n    super.ready();\n  }\n  /**\n   * Registers the element with AbsolutePositionStateManager\n   * @returns {void}\n   */\n  setPosition() {\n    let root = this;\n    root.__observe = true;\n    root.__manager.loadElement(root);\n  }\n\n  /**\n   * Unregisters the element with AbsolutePositionStateManager\n   * @returns {void}\n   */\n  unsetPosition() {\n    let root = this;\n    root.__observe = false;\n    root.__manager.unloadElement(root);\n  }\n\n  /**\n   * Updates  the element's position\n   * @returns {void}\n   */\n  updatePosition() {\n    let root = this;\n    if (root.__observe === true) {\n      root.__manager.positionElement(root);\n    }\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   * @returns {void}\n   */\n  disconnectedCallback() {\n    this.unsetPosition();\n    super.disconnectedCallback();\n  }\n}\nwindow.customElements.define(\n  AbsolutePositionBehavior.tag,\n  AbsolutePositionBehavior\n);\nexport { AbsolutePositionBehavior };\n"],"names":["window","AbsolutePositionStateManager","requestAvailability","instance","document","createElement","body","appendChild","PolymerElement","els","type","Array","value","el","this","__on","undefined","push","positionElement","addEventListeners","filter","removeEventListeners","root","__timeout","updateElements","addEventListener","clearTimeout","setTimeout","__observer","MutationObserver","mutations","checkMutations","observe","attributes","childList","subtree","characterData","update","forEach","mutation","attributeName","_this2","includes","target","selector","docQuery","querySelectorAll","length","querySelector","ancestor","parentNode","nodeType","host","removeEventListener","disconnect","findTarget","offsetParent","offset","parentRect","getBoundingClientRect","targetRect","elRect","vertical","position","fitToBounds","pos1","pos2","getRect","rect","width","height","coord","min","max","fitToVisibleBounds","Math","getCoord","top","left","isFit","size","before","flip","flipData","bottom","right","style","__positions","self","parent","customElements","define","tag","AbsolutePositionBehavior","__observe","__manager","auto","setPosition","loadElement","unloadElement","unsetPosition","html","props","Boolean","String","Number","Object","assign"],"mappings":"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"}