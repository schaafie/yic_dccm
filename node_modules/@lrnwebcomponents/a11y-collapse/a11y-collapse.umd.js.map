{"version":3,"file":"a11y-collapse.umd.js","sources":["lib/a11y-collapse-button-styles.js","lib/a11y-collapse-accordion-button.js","lib/a11y-collapse-icon-button.js","a11y-collapse.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `a11y-collapse-button-styles`\n * `a shared set of styles for a11y-collapse-button`\n *\n * @microcopy - language worth noting:\n *  -\n * @customElement\n * @polymer\n * @see ./a11y-collapse-icon-button.js\n * @see ./a11y-collapse-accordion-button.js\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nconst styleElement = document.createElement(\"dom-module\");\n\nconst css = html`\n  <style>\n    :host #heading {\n      display: flex;\n      justify-content: stretch;\n      align-items: center;\n      padding: 0\n        var(\n          --a11y-collapse-padding-right,\n          var(--a11y-collapse-horizontal-padding, 16px)\n        )\n        0\n        var(\n          --a11y-collapse-padding-left,\n          var(--a11y-collapse-horizontal-padding, 16px)\n        );\n      font-weight: bold;\n      @apply --a11y-collapse-heading;\n    }\n    :host #text {\n      flex-grow: 1;\n      @apply --a11y-collapse-heading-text;\n    }\n    :host #expand {\n      transition: transform 0.5s;\n      @apply --a11y-collapse-icon;\n    }\n    :host #expand[rotated] {\n      transform: rotate(-90deg);\n      @apply --a11y-collapse-icon-rotated;\n    }\n    :host [aria-controls] {\n      cursor: pointer;\n    }\n    :host([disabled]) [aria-controls] {\n      cursor: not-allowed;\n    }\n    :host([expanded]) #heading {\n      @apply --a11y-collapse-heading-expanded;\n    }\n    :host([expanded]) #text {\n      @apply --a11y-collapse-heading-text-expanded;\n    }\n    :host([expanded]) #expand {\n      @apply --a11y-collapse-icon-expanded;\n    }\n  </style>\n`;\nstyleElement.appendChild(css);\n\nstyleElement.register(\"a11y-collapse-button-styles\");\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport \"./a11y-collapse-button-styles.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\n/**\n`a11y-collapse-accordion-button`\nAn accessible expand collapse.\n\n@microcopy - the mental model for this element\n\n  <a11y-collapse-accordion-button \n    disabled\n    icon=\"\"                         //The expand/collapse icon. Default is \"icons:expand-more\"\n    label=\"\"                        //The expand/collapse label. Default is \"expand/collapse\"\n    tooltip=\"\"                      //The expand/collapse tooltip. Default is \"toggle expand/collapse\"\n    <p slot=\"heading\">...</p>       //Named slot for a heading.\n    ...                             //Unnamed slot for a collapsible content.\n  </a11y-collapse-accordion-button>\n\n  CSS Variables: \n  --a11y-collapse-accordion-button-horizontal-padding               //sets the horizontal padding (left and right) inside the a11y-collapse-accordion-button\n  --a11y-collapse-accordion-button-vertical-padding                 //sets the horizontal padding (top and bottom) inside the a11y-collapse-accordion-button\n  --a11y-collapse-accordion-button-border                           //sets the border style. Default is 0px solid black\n\n  CSS Mixins: \n  --a11y-collapse-icon-button-icon-focus: { ... };             //sets CSS for the a11y-collapse-icon-button icon when button is focused or hovered\n  --a11y-collapse-heading-focus: { ... };                      //sets CSS for the a11y-collapse heading when focused or hovered\n  --a11y-collapse-heading-text-focus: { ... };                 //sets CSS for the a11y-collapse heading text when focused or hovered\n\n * @customElement\n * @polymer\n * @see ../a11y-collapse.js\n * @see ./a11y-collapse-button-styles.js\n */\nclass A11yCollapseAccordionButton extends PolymerElement {\n  static get tag() {\n    return \"a11y-collapse-accordion-button\";\n  }\n  static get template() {\n    return html`\n      <style include=\"a11y-collapse-button-styles\">\n        :host #heading:focus,\n        :host #heading:hover {\n          @apply --a11y-collapse-heading-focus;\n        }\n        :host #heading:focus #text,\n        :host #heading:hover #text {\n          @apply --a11y-collapse-heading-text-focus;\n        }\n        :host #heading:focus #expand,\n        :host #heading:hover #expand {\n          @apply --a11y-collapse-icon-focus;\n        }\n      </style>\n      <div\n        id=\"heading\"\n        aria-controls=\"content\"\n        aria-expanded\\$=\"[[expanded]]\"\n        disabled\\$=\"[[disabled]]\"\n        label\\$=\"[[label]]\"\n        role=\"button\"\n      >\n        <div id=\"text\"><slot></slot></div>\n        <iron-icon\n          id=\"expand\"\n          aria-hidden=\"true\"\n          icon\\$=\"[[icon]]\"\n          rotated\\$=\"[[rotated]]\"\n        >\n        </iron-icon>\n      </div>\n      <paper-tooltip for=\"heading\">[[tooltip]]</paper-tooltip>\n    `;\n  }\n  static get properties() {\n    return {\n      /**\n       * is disabled?\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * icon when expanded\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * icon for the button\n       */\n      icon: {\n        type: String,\n        value: \"icons:expand-more\"\n      },\n      /**\n       * label for the button\n       */\n      label: {\n        type: String,\n        value: \"expand/collapse\"\n      },\n      /**\n       * tooltip for the button\n       */\n      tooltip: {\n        type: String,\n        value: \"toggle expand/collapse\"\n      },\n      /**\n       * If no expanded icon is set, the default icon will rotate when expanded\n       */\n      rotated: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n  /**\n   * life cycle\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    afterNextRender(this, function() {\n      this.addEventListener(\"click\", this._onTap.bind(this));\n    });\n  }\n  /**\n   * Handle tap\n   */\n  _onTap(e) {\n    if (!this.disabled) {\n      this.dispatchEvent(\n        new CustomEvent(\"a11y-collapse-tap\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this\n        })\n      );\n    }\n  }\n}\nwindow.customElements.define(\n  A11yCollapseAccordionButton.tag,\n  A11yCollapseAccordionButton\n);\nexport { A11yCollapseAccordionButton };\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport \"@polymer/paper-icon-button/paper-icon-button.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"./a11y-collapse-button-styles.js\";\n/**\n * `a11y-collapse-icon-button`\n * An accessible expand collapse.\n * @microcopy - the mental model for this element```\n  <ally-collapse-icon-button id=\"iconbutton\" \n    expanded$=\"[[_setAriaExpanded(expanded)]]\"\n    label=\"\"                        //The expand/collapse label. Default is \"expand/collapse\"\n    icon=\"\"                         //The expand/collapse icon. Default is \"icons:expand-more\"\n    tooltip=\"\"                      //The expand/collapse tooltip. Default is \"toggle expand/collapse\"\n    rotated$=\"[[__rotateIcon]]\">\n  </ally-collapse-icon-button>\n\n  <a11y-collapse-icon-button \n    accordion \n    disabled\n    icon=\"\"                         //The expand/collapse icon. Default is \"icons:expand-more\"\n    icon-expanded=\"\"                //The expand/collapse icon when expanded. Default is the same as when collapsed.\n    label=\"\"                        //The expand/collapse label. Default is \"expand/collapse\"\n    label-expanded=\"\"               //The expand/collapse label when expanded. Default is the same as when collapsed.\n    tooltip=\"\"                      //The expand/collapse tooltip. Default is \"toggle expand/collapse\"\n    tooltip-expanded=\"\"             //The expand/collapse tooltip when expanded. Default is the same as when collapsed.\n    <p slot=\"heading\">...</p>       //Named slot for a heading.\n    ...                             //Unnamed slot for a collapsible content.\n  </a11y-collapse-icon-button>\n\n  CSS Variables: \n  --a11y-collapse-icon-button-horizontal-padding               //sets the horizontal padding (left and right) inside the a11y-collapse-icon-button\n  --a11y-collapse-icon-button-vertical-padding                 //sets the horizontal padding (top and bottom) inside the a11y-collapse-icon-button\n  --a11y-collapse-icon-button-border                           //sets the border style. Default is 0px solid black\n\n  CSS Mixins: \n  --a11y-collapse-icon-button-icon-focus: { ... };             //sets CSS for the a11y-collapse-icon-button icon when button is focused or hovered\n```\n * @customElement\n * @polymer\n * @see ../a11y-collapse.js\n * @see ./a11y-collapse-button-styles.js\n */\nclass A11yCollapseIconButton extends PolymerElement {\n  static get tag() {\n    return \"a11y-collapse-icon-button\";\n  }\n  static get template() {\n    return html`\n      <style include=\"a11y-collapse-button-styles\">\n        :host #expand:focus,\n        :host #expand:hover {\n          @apply --a11y-collapse-icon-focus;\n        }\n      </style>\n      <div id=\"heading\">\n        <div id=\"text\"><slot></slot></div>\n        <paper-icon-button\n          id=\"expand\"\n          alt\\$=\"[[label]]\"\n          aria-controls=\"content\"\n          aria-expanded\\$=\"[[exanded]]\"\n          disabled\\$=\"[[disabled]]\"\n          label\\$=\"[[label]]\"\n          icon\\$=\"[[icon]]\"\n          rotated\\$=\"[[rotated]]\"\n        >\n        </paper-icon-button>\n        <paper-tooltip for=\"expand\">[[tooltip]]</paper-tooltip>\n      </div>\n    `;\n  }\n  static get properties() {\n    return {\n      /**\n       * is disabled?\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * icon when expanded\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * icon for the button\n       */\n      icon: {\n        type: String,\n        value: \"icons:expand-more\"\n      },\n      /**\n       * label for the button\n       */\n      label: {\n        type: String,\n        value: \"expand/collapse\"\n      },\n      /**\n       * tooltip for the button\n       */\n      tooltip: {\n        type: String,\n        value: \"toggle expand/collapse\"\n      },\n      /**\n       * If no expanded icon is set, the default icon will rotate when expanded\n       */\n      rotated: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    afterNextRender(this, function() {\n      this.$.expand.addEventListener(\"click\", this._onTap.bind(this));\n    });\n  }\n  disconnectedCallback() {\n    this.$.expand.removeEventListener(\"click\", this._onTap.bind(this));\n    super.disconnectedCallback();\n  }\n  /**\n   * Handle tap\n   */\n  _onTap(e) {\n    if (!this.disabled) {\n      this.dispatchEvent(\n        new CustomEvent(\"a11y-collapse-tap\", {\n          bubbles: true,\n          composed: true,\n          cancelable: true,\n          detail: this\n        })\n      );\n    }\n  }\n}\nwindow.customElements.define(\n  A11yCollapseIconButton.tag,\n  A11yCollapseIconButton\n);\nexport { A11yCollapseIconButton };\n","import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/polymer/lib/elements/dom-if.js\";\nimport { flush } from \"@polymer/polymer/lib/utils/flush.js\";\nimport \"./lib/a11y-collapse-accordion-button.js\";\nimport \"./lib/a11y-collapse-icon-button.js\";\n/**\n * `a11y-collapse`\n * An accessible expand collapse.\n * \n * @microcopy - the mental model for this element```\n  <a11y-collapse \n    accordion \n    disabled\n    icon=\"\"                         //The expand/collapse icon. Default is \"icons:expand-more\"\n    icon-expanded=\"\"                //The expand/collapse icon when expanded. Default is the same as when collapsed.\n    label=\"\"                        //The expand/collapse label. Default is \"expand/collapse\"\n    label-expanded=\"\"               //The expand/collapse label when expanded. Default is the same as when collapsed.\n    tooltip=\"\"                      //The expand/collapse tooltip. Default is \"toggle expand/collapse\"\n    tooltip-expanded=\"\"             //The expand/collapse tooltip when expanded. Default is the same as when collapsed.\n    <p slot=\"heading\">...</p>       //Named slot for a heading.\n    ...                             //Unnamed slot for a collapsible content.\n  </a11y-collapse>\n\n  CSS Variables: \n  --a11y-collapse-horizontal-padding               //sets the horizontal padding (left and right) inside the a11y-collapse\n  --a11y-collapse-vertical-padding                 //sets the horizontal padding (top and bottom) inside the a11y-collapse\n  --a11y-collapse-border                           //sets the border style. Default is 0px solid black\n\n  CSS Mixins: \n  --a11y-collapse: { ... };                        //sets CSS for the a11y-collapse container\n  --a11y-collapse-disabled: { ... };               //sets CSS for the a11y-collapse container when disabled\n  --a11y-collapse-expanded: { ... };               //sets CSS for the a11y-collapse container when expanded\n  --a11y-collapse-heading: { ... };                //sets CSS for the a11y-collapse heading\n  --a11y-collapse-heading-expanded: { ... };       //sets CSS for the a11y-collapse heading when expanded\n  --a11y-collapse-heading-focus: { ... };          //sets CSS for the a11y-collapse heading when focused or hovered\n  --a11y-collapse-heading-text: { ... };           //sets CSS for the a11y-collapse heading text\n  --a11y-collapse-heading-text-expanded: { ... };  //sets CSS for the a11y-collapse heading text when expanded\n  --a11y-collapse-heading-text-focus: { ... };     //sets CSS for the a11y-collapse heading text when heading is focused or hovered\n  --a11y-collapse-icon: { ... };                   //sets CSS for the a11y-collapse icon\n  --a11y-collapse-icon-expanded: { ... };          //sets CSS for the a11y-collapse icon when expanded\n  --a11y-collapse-icon-focus: { ... };             //sets CSS for the a11y-collapse icon when button is focused or hovered\n  --a11y-collapse-icon-rotated: { ... };           //sets CSS for the a11y-collapse icon when rotated\n  --a11y-collapse-content: { ... };                //sets CSS for the a11y-collapse expanded/collapsed content\n  --a11y-collapse-content-expanded: { ... };       //sets CSS for the a11y-collapse expanded/collapsed content when expanded\n```\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n */\nclass A11yCollapse extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          margin: var(--a11y-collapse-margin, 15px 0);\n          border: var(--a11y-collapse-border, 1px solid);\n          transition: all 0.5s;\n          @apply --a11y-collapse;\n        }\n        :host #content {\n          max-height: 0;\n          overflow: hidden;\n          padding: 0\n            var(\n              --a11y-collapse-padding-right,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            )\n            0\n            var(\n              --a11y-collapse-padding-left,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            );\n          border-top: 0px solid rgba(255, 255, 255, 0);\n          transition: all 0.5s ease-in-out;\n          @apply --a11y-collapse-content;\n        }\n        :host(:not(:first-of-type)) {\n          border-top: var(\n            --a11y-collapse-border-between,\n            var(--a11y-collapse-border, 1px solid)\n          );\n        }\n        :host([disabled]) {\n          opacity: 0.5;\n          @apply --a11y-collapse-disabled;\n        }\n        :host([disabled]:not([accordion])) #expand,\n        :host([disabled][accordion]) #heading {\n          cursor: not-allowed;\n        }\n        :host([expanded]) {\n          @apply --a11y-collapse-expanded;\n        }\n        :host([expanded]) #content {\n          max-height: unset;\n          overflow: hidden;\n          padding: var(\n              --a11y-collapse-padding-top,\n              var(--a11y-collapse-vertical-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-right,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-bottom,\n              var(--a11y-collapse-vertical-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-left,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            );\n          border-top: var(--a11y-collapse-border, 1px solid);\n          @apply --a11y-collapse-content-expanded;\n        }\n        :host(:not([expanded])) #content-inner {\n          overflow: hidden;\n        }\n      </style>\n      <template is=\"dom-if\" if=\"[[!accordion]]\" restamp>\n        <a11y-collapse-icon-button\n          id=\"iconbutton\"\n          disabled$=\"[[disabled]]\"\n          expanded$=\"[[_setAriaExpanded(expanded)]]\"\n          label$=\"[[_getExpandCollapse(expanded,label,labelExpanded)]]\"\n          icon$=\"[[_getExpandCollapse(expanded,icon,iconExpanded)]]\"\n          rotated$=\"[[__rotateIcon]]\"\n          tooltip$=\"[[_getExpandCollapse(expanded,tooltip,tooltipExpanded)]]\"\n        >\n          <slot name=\"heading\"></slot>\n        </a11y-collapse-icon-button>\n      </template>\n      <template is=\"dom-if\" if=\"[[accordion]]\" restamp>\n        <a11y-collapse-accordion-button\n          id=\"accordionbutton\"\n          disabled$=\"[[disabled]]\"\n          expanded$=\"[[_setAriaExpanded(expanded)]]\"\n          label$=\"[[_getExpandCollapse(expanded,label,labelExpanded)]]\"\n          icon$=\"[[_getExpandCollapse(expanded,icon,iconExpanded)]]\"\n          rotated$=\"[[__rotateIcon]]\"\n          tooltip$=\"[[_getExpandCollapse(expanded,tooltip,tooltipExpanded)]]\"\n        >\n          <slot name=\"heading\"></slot>\n        </a11y-collapse-accordion-button>\n      </template>\n      <div\n        id=\"content\"\n        aria-hidden\\$=\"{{!expanded}}\"\n        aria-labelledby=\"heading\"\n        aria-live=\"polite\"\n      >\n        <div id=\"content-inner\"><slot name=\"content\"></slot><slot></slot></div>\n      </div>\n    `;\n  }\n  static get tag() {\n    return \"a11y-collapse\";\n  }\n  static get properties() {\n    return {\n      /**\n       * accordion-style: whole header acts as button? default is just icon.\n       */\n      accordion: {\n        name: \"accordion\",\n        type: Boolean,\n        value: false,\n        observer: \"_flush\",\n        reflectToAttribute: true\n      },\n      /**\n       * is disabled?\n       */\n      disabled: {\n        name: \"disabled\",\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * icon when expanded\n       */\n      expanded: {\n        name: \"expanded\",\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: \"_fireToggleEvents\"\n      },\n      /**\n       * icon for the button\n       */\n      icon: {\n        name: \"icon\",\n        type: String,\n        value: \"expand-more\"\n      },\n      /**\n       * icon when expanded\n       */\n      iconExpanded: {\n        name: \"iconExpanded\",\n        type: String,\n        value: null\n      },\n      /**\n       * label for the button\n       */\n      label: {\n        name: \"label\",\n        type: String,\n        value: \"expand/collapse\"\n      },\n      /**\n       * optional label for the button when expanded\n       */\n      labelExpanded: {\n        name: \"labelExpanded\",\n        type: String,\n        value: null\n      },\n      /**\n       * tooltip for the button\n       */\n      tooltip: {\n        name: \"tooltip\",\n        type: String,\n        value: \"toggle expand/collapse\"\n      },\n      /**\n       * optional tooltip for the button when expanded\n       */\n      tooltipExpanded: {\n        name: \"tooltipExpanded\",\n        type: String,\n        value: null\n      },\n      /**\n       * If no expanded icon is set, the default icon will rotate when expanded\n       */\n      __rotateIcon: {\n        name: \"__rotateIcon\",\n        type: Boolean,\n        computed: \"_isRotated(expanded,iconExpanded)\"\n      }\n    };\n  }\n  _flush(newValue) {\n    flush();\n  }\n  /**\n   * Attached to the DOM, now fire.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(\n      new CustomEvent(\"a11y-collapse-attached\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n    this.addEventListener(\"a11y-collapse-tap\", this._onTap.bind(this));\n  }\n  static get haxProperties() {\n    return {\n      canScale: false,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Single Expand Collapse\",\n        description: \"A single instance of an expand collapse.\",\n        icon: \"view-day\",\n        color: \"grey\",\n        groups: [\"Text\"],\n        meta: {\n          author: \"Your organization on github\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"expanded\",\n            title: \"Expanded\",\n            description: \"Expand by default\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"label\",\n            title: \"Label\",\n            description: \"The label of the toggle expand/collapse button\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"tooltip\",\n            title: \"Tooltip\",\n            description: \"The tooltip for the toggle expand/collapse button\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"icon\",\n            title: \"Icon\",\n            description: \"The icon for the toggle expand/collapse button\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"iconExpanded\",\n            title: \"Expanded Icon\",\n            description:\n              \"Optional: The icon for the toggle expand/collapse button when expanded\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n  /**\n   * Collapses the content\n   */\n  collapse() {\n    this.toggle(false);\n  }\n\n  /**\n   * Let the group know that this is gone.\n   */\n  disconnectedCallback() {\n    this.dispatchEvent(\n      new CustomEvent(\"a11y-collapse-detached\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n    this.removeEventListener(\"a11y-collapse-tap\", this._onTap.bind(this));\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Expands the content\n   */\n  expand() {\n    this.toggle(true);\n  }\n\n  /**\n   * Toggles based on mode\n   */\n  toggle(mode) {\n    this.expanded = mode !== undefined ? mode : !this.expanded;\n  }\n\n  /**\n   * Fires toggling events\n   */\n  _fireToggleEvents() {\n    this.dispatchEvent(\n      new CustomEvent(\"toggle\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n    //supports legacy version\n    this.dispatchEvent(\n      new CustomEvent(\"a11y-collapse-toggle\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n    if (this.expanded) {\n      this.dispatchEvent(\n        new CustomEvent(\"expand\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this\n        })\n      );\n    } else {\n      this.dispatchEvent(\n        new CustomEvent(\"collapse\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this\n        })\n      );\n    }\n  }\n\n  /**\n   * If no expanded value is set, the default will be same as collapsed\n   */\n  _overrideProp(prop, val) {\n    this[prop] = val;\n  }\n\n  /**\n   * If no expanded value is set, the default will be same as collapsed\n   */\n  _getExpandCollapse(expanded, ifFalse, ifTrue) {\n    return expanded && ifTrue !== null ? ifTrue : ifFalse;\n  }\n\n  /**\n   * If no expanded icon is set, the default icon will rotate when expanded\n   */\n  _isRotated(expanded, iconExpanded) {\n    return !expanded && iconExpanded === null;\n  }\n\n  /**\n   * Handle tap\n   */\n  _onTap(e) {\n    if (!this.disabled) {\n      this.toggle();\n      this.dispatchEvent(\n        new CustomEvent(\"a11y-collapse-click\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: this\n        })\n      );\n    }\n  }\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  _setAriaExpanded(expanded) {\n    return \"\" + expanded;\n  }\n}\nwindow.customElements.define(A11yCollapse.tag, A11yCollapse);\nexport { A11yCollapse };\n"],"names":["styleElement","document","createElement","css","html","appendChild","register","A11yCollapseAccordionButton","PolymerElement","afterNextRender","this","addEventListener","_onTap","bind","e","disabled","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","type","Boolean","value","reflectToAttribute","expanded","icon","String","label","tooltip","rotated","window","customElements","define","tag","A11yCollapseIconButton","$","expand","removeEventListener","A11yCollapse","newValue","flush","toggle","mode","undefined","prop","val","ifFalse","ifTrue","iconExpanded","accordion","name","observer","labelExpanded","tooltipExpanded","__rotateIcon","computed","canScale","canPosition","canEditSource","gizmo","title","description","color","groups","meta","author","settings","quick","configure","property","inputMethod","advanced"],"mappings":"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"}