{"version":3,"file":"schema-behaviors.umd.js","sources":["schema-behaviors.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\n\nexport const SchemaBehaviors = function(SuperClass) {\n  return class extends SuperClass {\n    static get properties() {\n      let props = {\n        /**\n         * Unique Resource ID, generated when schemaMap processes.\n         */\n        schemaResourceID: {\n          type: String,\n          value: \"\"\n        },\n        /**\n         * Schema Map for the element, used to generate a valid prefix on the fly\n         */\n        schemaMap: {\n          type: Object,\n          readOnly: true,\n          value: {\n            prefix: {\n              oer: \"http://oerschema.org/\",\n              schema: \"http://schema.org/\",\n              dc: \"http://purl.org/dc/terms/\",\n              foaf: \"http://xmlns.com/foaf/0.1/\",\n              cc: \"http://creativecommons.org/ns#\",\n              bib: \"http://bib.schema.org\"\n            }\n          },\n          observer: \"_schemaMapChanged\"\n        }\n      };\n      if (super.properties) {\n        props = Object.assign(props, super.properties);\n      }\n      return props;\n    }\n    /**\n     * Generate a uinque ID\n     */\n    generateResourceID() {\n      function idPart() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      }\n      return (\n        \"#\" +\n        idPart() +\n        idPart() +\n        \"-\" +\n        idPart() +\n        \"-\" +\n        idPart() +\n        \"-\" +\n        idPart()\n      );\n    }\n    /**\n     * Notice the schema map has changed, reprocess attributes.\n     */\n    _schemaMapChanged(newValue, oldValue) {\n      if (typeof newValue !== typeof undefined) {\n        // use this to tie into schemaResourceID build\n        this.schemaResourceID = this.getAttribute(\"resource\");\n        // if it still doesn't have one then we have to check\n        if (this.schemaResourceID == \"\" || this.schemaResourceID == null) {\n          this.schemaResourceID = this.generateResourceID();\n          this.setAttribute(\"resource\", this.schemaResourceID);\n        }\n        let prefixes = newValue.prefix;\n        let prefix = \"\";\n        // build prefix string\n        for (var property in prefixes) {\n          if (prefixes.hasOwnProperty(property)) {\n            prefix += property + \":\" + prefixes[property] + \" \";\n          }\n        }\n        // set prefix on the main element itself\n        if (prefix != \"\") {\n          this.setAttribute(\"prefix\", prefix);\n        }\n      }\n    }\n  };\n};\n"],"names":["SuperClass","props","schemaResourceID","type","String","value","schemaMap","Object","readOnly","prefix","oer","schema","dc","foaf","cc","bib","observer","assign","idPart","Math","floor","random","toString","substring","newValue","oldValue","_typeof","this","getAttribute","generateResourceID","setAttribute","prefixes","property","hasOwnProperty"],"mappings":"+yCAK+B,SAASA,waACjBA,+CAEbC,EAAQ,CAIVC,iBAAkB,CAChBC,KAAMC,OACNC,MAAO,IAKTC,UAAW,CACTH,KAAMI,OACNC,UAAU,EACVH,MAAO,CACLI,OAAQ,CACNC,IAAK,wBACLC,OAAQ,qBACRC,GAAI,4BACJC,KAAM,6BACNC,GAAI,iCACJC,IAAK,0BAGTC,SAAU,yDAIZf,EAAQM,OAAOU,OAAOhB,8BAEjBA,6DAMEiB,WACAC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACzBC,SAAS,IACTC,UAAU,SAGb,IACAL,IACAA,IACA,IACAA,IACA,IACAA,IACA,IACAA,8CAMcM,EAAUC,oBACtBC,EAAOF,GAA+B,MAEnCtB,iBAAmByB,KAAKC,aAAa,YAEb,IAAzBD,KAAKzB,kBAAmD,MAAzByB,KAAKzB,wBACjCA,iBAAmByB,KAAKE,0BACxBC,aAAa,WAAYH,KAAKzB,uBAEjC6B,EAAWP,EAASf,OACpBA,EAAS,OAER,IAAIuB,KAAYD,EACfA,EAASE,eAAeD,KAC1BvB,GAAUuB,EAAW,IAAMD,EAASC,GAAY,KAItC,IAAVvB,QACGqB,aAAa,SAAUrB"}