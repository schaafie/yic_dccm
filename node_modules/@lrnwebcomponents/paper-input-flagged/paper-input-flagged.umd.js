!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@polymer/polymer/polymer-element.js")):"function"==typeof define&&define.amd?define(["exports","@polymer/polymer/polymer-element.js"],t):t((e=e||self).PaperInputFlagged={},e.polymerElement_js)}(this,function(e,t){"use strict";function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(){var e,t,n=(e=['\n      <style>\n        :host {\n          display: block;\n        }\n        iron-icon {\n          transition: 0.6s all ease-in;\n          width: 24px;\n          height: 24px;\n          margin-right: 4px;\n        }\n        paper-tooltip {\n          --paper-tooltip-delay-in: 100;\n          font-size: 11px;\n        }\n        #icon {\n          color: var(--paper-grey-400);\n          background-color: transparent;\n        }\n        :host([status="info"]) #icon {\n          color: var(--paper-green-400);\n        }\n        :host([status="notice"]) #icon {\n          color: var(--paper-grey-400);\n        }\n        :host([status="warning"]) #icon {\n          color: var(--paper-yellow-700);\n        }\n        :host([status="error"]) #icon {\n          color: var(--paper-red-900);\n        }\n        .element-invisible {\n          position: absolute !important;\n          clip: rect(1px, 1px, 1px, 1px);\n          overflow: hidden;\n          height: 1px;\n        }\n      </style>\n      <paper-input\n        label="[[label]]"\n        value="{{value}}"\n        char-counter="[[charCounter]]"\n        disabled="[[disabled]]"\n        minlength="[[minlength]]"\n        maxlength="[[minlength]]"\n      >\n        <iron-icon id="icon" icon="[[icon]]" slot="prefix"></iron-icon>\n      </paper-input>\n      <div class="element-invisible">[[__activeMessage]]</div>\n      <paper-tooltip\n        for="icon"\n        position="top"\n        offset="20"\n        fit-to-visible-bounds\n      >\n        [[__activeMessage]]\n      </paper-tooltip>\n    '],t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}})));return s=function(){return n},n}var a=function(e){function a(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),e=i(this,r(a).call(this)),import("@polymer/paper-input/paper-input.js"),import("@polymer/paper-tooltip/paper-tooltip.js"),import("@polymer/iron-icons/iron-icons.js"),import("@polymer/iron-icon/iron-icon.js"),e}var c,p,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(a,t.PolymerElement),c=a,u=[{key:"template",get:function(){return t.html(s())}},{key:"tag",get:function(){return"paper-input-flagged"}},{key:"properties",get:function(){return{icon:{type:String,computed:"_iconFromStatus(status)"},status:{type:String,reflectToAttribute:!0,computed:"testStatus(flaggedInput, value)"},value:{type:String,notify:!0,value:""},flaggedInput:{type:Array,value:[{match:null,message:"Alt data is required for everything except decoration images.",status:"notice"},{match:"image",message:"Screenreaders will say the word image, don't put it in the descriptive text",status:"error"},{match:"photo",message:"Screenreaders will say the word image, don't put photo in the descriptive text",status:"error"},{match:"picture",message:"Screenreaders will say the word image, don't put picture in the descriptive text",status:"error"},{match:3,message:"Description not effective enough. This should be at least a sentance about what the image is.",status:"error"},{match:10,message:"Make sure your alt text is descriptive enough for those that can't see the media.",status:"warning"}]},inputSuccess:{type:Object,value:{message:"You passed our simple accessibility checks.",status:"info"}}}}}],(p=[{key:"testStatus",value:function(e,t){for(var n in e){if(null===e[n].match&&(""===t||null===t))return this.__activeMessage=e[n].message,e[n].status;if(!isNaN(e[n].match)&&t.split(/\s+/g).length<parseInt(e[n].match))return this.__activeMessage=e[n].message,e[n].status;if(t.toLowerCase().includes(e[n].match))return this.__activeMessage=e[n].message,e[n].status}return this.__activeMessage=this.inputSuccess.message,this.inputSuccess.status}},{key:"_iconFromStatus",value:function(e){switch(e){case"error":return"icons:error";case"warning":case"notice":return"icons:warning";case"info":return"icons:info-outline";default:return"icons:info"}}}])&&n(c.prototype,p),u&&n(c,u),a}();window.customElements.define(a.tag,a),e.PaperInputFlagged=a,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=paper-input-flagged.umd.js.map
